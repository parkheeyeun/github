import React, { useState, useContext, useEffect, useRef } from 'react';
import './App.css';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer
} from "recharts";

const incheon=[
  {Q0:'인천광역시', Q1:'연수구', id: 2818500000},
  {Q0:'인천광역시', Q1:'남동구', id: 2820000000},
  {Q0:'인천광역시', Q1:'부평구', id: 2817700000}
]

const yoils = [1,2,3,4,5,6,7,8]

function fetchData(city,yoil) {

  const endPoint = 'http://apis.data.go.kr/B552657/ErmctInsttInfoInqireService/getParmacyListInfoInqire'
  const serviceKey = 
  const type = 'json';
  const numOfRows = 10;
  const pageNo = 1;

  const promise = fetch(`${endPoint}?serviceKey=${serviceKey}&&type=${type}&numOfRows=${numOfRows}&pageNo=${pageNo}&{Q0}=${city.sido}&{Q1}=${city.gungu}&QT=${yoil}`)
    .then(res => {
      if (!res.ok) {
        throw res;
      }
      return res.json();
    })

  return promise;
}

export default function App() {

  const [yoil, setYoil] = useState(yoils[0])
  const [city, setCity] = useState(incheon[0])

  return (
    <>
      <h1 className='text-center py-12 text-2xl font-semibold'>운영약국</h1>
      <div className="flex w-64 justify-between float-right mr-4 mt-2">
        {incheon.map(city =>(
          <button
          key={city.id}
          onClick={() =>setCity(city)}>
            {city.name}
          </button>
        ))}
      </div>
      <div id='select-yoil'>
        <select onChange={(e) => setYoil(e.target.value)}>
          {yoils.map(yoil => (
            <option key={yoil} value={yoil}>{yoil}</option>
          ))}
        </select>
      </div>

      <Dashboard city={city} yoil={yoil}/>
    </>
  )
}

function Dashboard({ city, yoil }) {

  const [data, setData] = useState(null);
  const [isLoaded, setIsLoaded] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {

    setIsLoaded(false);
    setError(null);

    fetchData(city,yoil)
      .then(data => {
        console.log(data)
        setData(data);
      })
      .catch(error => {
        setError(error);
      })
      .finally(() => setIsLoaded(true));

  }, [])

  if (error) {
    return <p>failed to fetch</p>
  }

  if (!isLoaded) {
    return <p>fetching data...</p>
  }

  return (
    <>
      <h2>{}요일 조회 결과</h2>

      {data.name ? (
        <>
          {/* <Rechart complicate={data.items.item} /> */}

        </>
      ) : (
        <p>자료가 없습니다</p>
      )}
    </>
  )
}


// function Rechart({  }) {

  

//   return (
//     <div className="h={300px}">
//       <ResponsiveContainer width="100%" height="100%">
//         <BarChart
//           width={500}
//           height={300}
//           data={chartData}
//           margin={{
//             top: 5,
//             right: 30,
//             left: 20,
//             bottom: 5
//           }}
//         >
//           <CartesianGrid strokeDasharray="3 3" />
//           <XAxis dataKey="name" />
//           <YAxis />
//           <Tooltip />
//           <Legend />
//           <Bar dataKey="국내인" fill="#FF0060" />
//           <Bar dataKey="외국인" fill="#F6FA70" />
//         </BarChart>
//       </ResponsiveContainer>
//     </div>
//   );
// }


